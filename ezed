#!/usr/bin/env bash

# Copyright (C) 2019 Samuel A. Hernandez <samuel.hernandez.amador@gmail.com>. All Rights Reserved.
# This file is licensed under the GPLv3+. Please see COPYING for more information.

if [[ $("uname") == "Darwin" ]]; then
	osx=1
	config="$HOME/Library/'Application Support'"
else
	config=${XDG_CONFIG_HOME:-$HOME/.config}
fi

data=${XDG_DATA_HOME:-$HOME/.local/share}

die(){
	echo "$1" >&2; exit;
}

die_non_empty(){
	die "ERROR: option $1 must be defined/non-empty"
}

verbose() {
	if [[ $verbosity -eq 1 ]]; then
		echo "$@"
	fi
}

cmd_usage() {
	cat << _EOF
you're on your own for now
_EOF
}

cmd_version() {
	echo "ezed v0.0.1"
}

patch() {
	if ! grep -q 'injDir' "$core/"index.js; then
		cat >> "$core"/index.js << _EOF

process.env.injDir = '$ed_dir';
require(\`\${process.env.injDir}/injection.js\`);
_EOF
	else
		unpatch
		patch
	fi
}

unpatch () {
	sed -i -e "/injDir/d" -e "/^[[:space:]]*$/d" "$core"/index.js
}

download_ed() {
	echo "Downloading ED..."
	curl -#Lqo /tmp/ed "https://github.com/$gh_repo/archive/$branch/$revision.tar.gz"
	mkdir -p "$ed_dir"
	echo "Extracting to $ed_dir..."
	tar -xzf /tmp/ed --strip-components 1 -C "$ed_dir"
	rm /tmp/ed
}

y_or_n() {
	[[ "$yes" ]] && continue='y' || read -erp "Continue? [y/N] " continue
	[[ "$continue" == [Yy]* ]] && echo "Proceeding" || die "Quitting"
}

cmd_install() {
	cat << _EOF
This script will attempt to install EnhancedDiscord to:
$dir
from $gh_repo at revision $revision in branch $branch.
The ED installation will be located at $ed_dir. (will override any contents)
_EOF
	y_or_n
	install_ed
}

cmd_uninstall () {
	uninstall_ed
}

cmd_upgrade () {
	upgrade_ezed
}

upgrade_ezed () {
	script_download="https://raw.githubusercontent.com/erebid/ezed/master/ezed"
	script_location=$(readlink -f "${BASH_SOURCE[0]}")
	curl -sLqo "$script_location" $script_download
}

install_ed () {
	[[ -d "$dir" ]] || die "$dir doesn't exist."
	download_ed
	echo "$gh_repo:$branch" > "$ed_dir"/.ezed
	echo "{"css_loader":{"path":"./plugins/custom_style.css"}}" > "$ed_dir"/config.json
	cp "$ed_dir"/plugins/style.css "$ed_dir"/plugins/custom_style.css
	patch
	echo "Done!"
	echo "ED has now been installed. For custom css, edit the $ed_dir/plugins/custom_style.css file"
}

cmd_update () {
	unpatch
	patch
	update_ed
}

update_ed () {
	[[ -f "$ed_dir"/.ezed ]] || die "There is no ezed installation at $ed_dir."
	gh_repo=$(cut -d: -f1 "$ed_dir"/.ezed)
	branch=$(cut -d: -f2 "$ed_dir"/.ezed)
	revision='latest'
	download_ed
}

uninstall_ed() {
	echo "Unpatching $core/index.js..."
	unpatch
	echo "Done!"
	[[ ${no_remove} ]] || rm -rf $ed_dir
}

locate_flatpak() {
	flatpak_config=$(flatpak run --command=sh com.discordapp.Discord -c 'echo $XDG_CONFIG_HOME 1>&3' 3>&1)
	flatpak_data=$(flatpak run --command=sh com.discordapp.Discord -c 'echo $XDG_DATA_HOME 1>&3' 3>&1)
	config=${flatpak_config:-$HOME/.var/app/com.discordapp.Discord/config}
	data=${flatpak_data:-$HOME/.var/app/com.discordapp.Discord/data}
}

locate_snap() {
	snap_config=$(snap run --shell discord <<< 'echo "${XDG_CONFIG_HOME:-$SNAP_USER_DATA/.config}" 1>&3' 3>&1)
	snap_data=$(snap run --shell discord <<< 'echo "${XDG_DATA_HOME:-$SNAP_USER_DATA/.local/share}" 1>&3' 3>&1)
	config=${snap_config:-$HOME/snap/discord/current/.config}
	data=${snap_data:-$HOME/snap/discord/current/.local/share}
}

fix_options() {
	[[ ${flatpak} ]] && locate_flatpak
	[[ ${snap} ]] && locate_snap
	gh_repo=${gh_repo:-"joe27g/EnhancedDiscord"}
	detected_discords=("$config"/discord*)
	dir=${dir:-"${detected_discords[-1]}"}
	detected_versions=$(
		find "$dir" -maxdepth 1 -regextype sed -regex ".*/[0-9]\+.[0-9]\+.[0-9]\+" -print -quit
			 )
	core="$detected_versions/modules/discord_desktop_core"
	ed_dir=${ed_dir:-"$data/EnhancedDiscord"}
	branch=${branch:-'master'}
	revision=${revision:-'latest'}
	verbosity=0
}

PARAMS=""

while (( "$#" )); do
	case "$1" in
		-f|--flavor)
			if [[ ${2} ]]; then dir="$config/discord$2"; shift 2
			else die_non_empty '--flavor'; fi
			;;
		-v|--version)
			cmd_version
			exit 0
			;;
		-d|--discord-directory)
			if [[ ${2} ]]; then dir=$(cd "$2" && pwd); shift 2
			else die_non_empty '--discord-directory'; fi
			;;
		-e|--ed-directory)
			if [[ ${2} ]]; then mkdir -p "$2"; ed_dir=$(cd "$2" && pwd); shift 2
			else die_non_empty '--ed-directory'; fi
			;;
		-g|--github-repo)
			if [[ ${2} ]]; then gh_repo=$2; shift 2
			else die_non_empty '--github-repo'; fi
			;;
		-b|--branch)
			if [[ ${2} ]]; then branch=$2; shift 2
			else die_non_empty '--branch'; fi
			;;
		-B|--beta)
			branch="beta"
			shift
			;;
		-r|--revision)
			if [[ ${2} ]]; then revision=$2; shift 2
			else die_non_empty '--revision'; fi
			;;
		-V|--verbose)
			verbosity=1
			shift
			;;
		-y|--yes)
			yes=1
			shift
			;;
		--no-remove)
			no_remove=1
			shift
			;;
		--flatpak)
			flatpak=1
			shift
			;;
		--snap)
			snap=1
			shift
			;;
		--)
			shift
			break
			;;
		--*|-*=)
		echo "Error: Unsupported flag $1" >&2
		exit 1
		;;
		*)
			PARAMS="$PARAMS $1"
			shift
			;;
	esac
done
eval set -- "$PARAMS"

fix_options

case "$1" in
	help)
		cmd_usage
		;;
	install|in)
		cmd_install
		;;
	update|up)
		cmd_update
		;;
	upgrade)
		cmd_upgrade
		;;
	uninstall)
		cmd_uninstall
		;;
	reinject)
		unpatch
		patch
		;;
	version)
		cmd_version
		;;
	*)
		cmd_usage
		;;
esac

exit 0
